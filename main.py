import requests
from bs4 import BeautifulSoup
import csv

# Code from cURL converter

headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:97.0) Gecko/20100101 Firefox/97.0'
}

data = {
  '__EVENTTARGET': 'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$stdbtnSearch$LinkStandardButton',
  '__VIEWSTATE': '',
  'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$tbBusinessName': 'A',
  'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$cbActiveOnly': 'on'
}

# Create requests session
s = requests.Session()

# Make a POST request to the website
response = s.post('https://bsd.sos.mo.gov/BusinessEntity/BESearch.aspx', headers=headers, data=data)

# Write response to an html file
f = open("response.html", "w")
f.truncate(0)
f.write(response.text)
f.close()

# Convert website info to CSV
path = 'response.html'
soup = BeautifulSoup(open(path),'html.parser')
header = soup.find_all("table", id="ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBESearch_bsPanel_SearchResultGrid_ctl00")[0].find("thead")

headers = [th.text.encode("utf-8") for th in header.select("tr th")]
headers = headers[4:]

# Remove leading and trailing characters
for i in range(len(headers)):
  headers[i] = str(headers[i])
  headers[i] = headers[i].lstrip("'b")
  headers[i] = headers[i].rstrip("'")

# Remove extraneous heading
headers.pop(4)
print(headers)



# HTML_data = soup.find_all("table", id="ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBESearch_bsPanel_SearchResultGrid_ctl00")[0].find("tr")

# data_from_form = []
# for element in HTML_data:
#     sub_data = []
#     for sub_element in element:
#         try:
#             sub_data.append(sub_element.get_text())
#         except:
#             continue
#     data_from_form.append(sub_data)
# print(data_from_form)